"""<DP(동적계획법) 알고리즘>
- Dynamic Programming의 약자
- 그리디 알고리즘과 같이 최적화 문제를 해결하는 알고리즘
- 입력 크기가 작은 부분의 문제들을 모두 해결한 후에, 그 해들을 이용하여 보다 크기가 큰 문제들을 해결하여,
- 최종적으로 원래 주어진 입력의 문제를 해결하는 알고리즘 설계 기법.
"""


"""<DP를 적용한 피보나치 수>
- 피보나치 수를 구하는 함수는 부분 문제의 답으로부터 본 문제의 답을 얻을 수 있는 최적 부분 구조로 이루어져 있어, DP를 적용할 수 있음.
  @ 피보나치 수를 구하는 함수에 DP 적용하기
  1. 문제를 부분 문제로 분할한다.
     - fibo(n) 함수는 fibo(n-1)과 fibo(n-2)의 합
     - fibo(n-1) 함수는 fibo(n-2)과 fibo(n-3)의 합
     - ...
     - fibo(2) 함수는 fibo(1)과 fibo(0)의 합
     - 결과적으로, fibo(n)은 fibo(n-1), fibo(n-2), ..., fibo(2), fibo(1), fibo(0)의 부분집합으로 나뉨.
  2. 부분 문제로 나누는 일을 끝냈으면, 가장 작은 부분 문제부터 해를 구한다.
  3. 그 결과는 테이블에 저장하고, 테이블에 저장된 부분 문제의 해를 이용하여 상위 문제의 해를 구한다.
     - index [0]  [1]  [2]  [3]  [4]  ...  [n]   
     - value  0    1    1    2    3   ... fibo(n)
"""


"""<DP를 구현하는 2가지 방식>
1. recursive 방식
- 재귀적 구조는 내부에 시스템 호출 스택을 사용하는 오버헤드가 발생할 수 있음.

2. iterative 방식
- Memoization 을 재귀적 구조에 사용하는 것보다 반복적 구조로 DP를 구현한 것이 성능면에서 보다 효율적임.**
"""


########################################################################
# 피보나치 수를 구하는 함수에 DP를 적용한 알고리즘


def fibo(n):
    f = [0, 1]
    for i in range(2, n+1):
        f.append(f[i-1] + f[i-2])  # 작은 값부터 상위로 구해나감

    return f[n]


print(fibo(0))  # 0
print(fibo(1))  # 1
print(fibo(2))  # 1
print(fibo(3))  # 2
########################################################################