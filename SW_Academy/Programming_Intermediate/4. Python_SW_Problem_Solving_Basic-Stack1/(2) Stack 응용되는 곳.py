"""<스택이 응용되어 사용되는 경우 : 괄호검사>
- 스택을 이용해 괄호가 문법에 맞게 제대로 사용되었는지 확인할 수 있음.

  @ 괄호의 종류
  1. 대괄호 [ ]
  2. 중괄호 { }
  3. 소괄호 ( )

  @ 괄호의 유효조건
  1. 왼쪽 괄호의 개수와 오른쪽 괄호의 개수가 같아야 함.
  2. 같은 모양의 괄호에서 왼쪽 괄호는 오른쪽 괄호보다 먼저 나와야 함.

  @ 스택을 이용한 괄호검사
  if (  (  i == 0  )  &&  (  j == 0  )
  1. 탐색은 왼쪽 -> 오른쪽 방향으로 시작된다.
  2. '(' 왼쪽괄호를 만나서 스택에 왼쪽괄호를 스택에 넣는다.
  3. '(' 왼쪽괄호를 만나서 스택에 왼쪽괄호를 스택에 넣는다.
  4. ')' 오른쪽괄호를 만나서 스택에서 pop 하여 짝이 맞는이 확인한다(이상없음)
  5. '(' 왼쪽괄호를 만나서 스택에 왼쪽괄호를 스택에 넣는다.
  6. ')' 오른쪽괄호를 만나서 스택에서 pop 하여 짝이 맞는이 확인한다(이상없음)
  7. 괄호 수식이 끝났는데도 스택에 괄호가 남아있어서 요류를 발생시킨다.

  @ 괄호를 조사하는 알고리즘

                     문자열에 있는 괄호를 차례대로 조사한다

      왼쪽 괄호를 만나면 스택에 삽입             오른쪽 괄호를 만나면 스택에서 top 괄호를 삭제한 후
                                                 오른쪽 괄호와 짝이 맞는지 확인

          스택이 비어있음      괄호의 짝이 맞지 않음     문자열 끝까지 조사한 후에도 스택에 괄호가 남아있음
      (조건1 또는 조건2에 위배)    (조건3에 위배)                    (조건1에 위배)
"""


"""<스택이 응용되어 사용되는 경우 : Function Call 1>
- 스택은 프로그램에서의 함수 호출과 복귀에 따른 수행 순서를 관리함.
- 함수 호출 수행 순서를 그림으로 표현한 부분 : PPT참고
  
  @ 함수 호출에서 사용되는 기본원리
  1. 가장 마지막에 호출된 함수가 가장 먼저 실행을 완료하고 복귀하는 후입선출 구조이므로, 후입선출 구조의 스택을 이용하여 수행순서 관리.
  2. 함수 호출이 발생하면 호출한 함수 수행에 필요한 '지역변수, 매개변수, 수행 후 복귀할 주소 등'의 정보를 '스택 프레임'에 저장하여 '시스템 스택'에 삽입.
  3. 함수의 실행이 끝나면 시스템 스택의 top원소(스택 프레임)를 삭제(pop)하면서 프레임에 저장되어있던 복귀주소를 확인하고 복귀.
  4. 함수 호출과 복귀에 따라 이 과정을 반복하여, 전체 프로그램 수행이 종료되면 시스템 스택은 공백 스택이 됨.
"""


"""<스택이 응용되어 사용되는 경우 : Function Call 2>
  @ 재귀호출
  1. 자기 자신을 호출하여 순환 수행되는 것.
  2. 함수에서 실행해야 하는 작업의 특성에 따라 일반적인 호출방식보다 재귀 호출 방식을 사용하여 함수를 만들면 프로그램의 크기를 줄이고 간단하게 작성할 수 있음.
  3. 디버깅이 어렵고 잘못 작성하게 되면 수행 시간이 많이 소요됨.  

  @ 재귀호출을 이용해 작성할 수 있는 함수 : factorial
  - 마지막에 구한 하위 값을 이용하여 차례로 상위 값을 구하는 작업을 반복하는 것으로 이해하면 됨.
  - 호출되는 과정 : PPT참고 
  
   n! = n * (n-1)!
   (n-1)! = (n-1) * (n-2)!
   (n-2)! = (n-2) * (n-3)!
   ...
   2! = 2 * 1!
   1! = 1
"""