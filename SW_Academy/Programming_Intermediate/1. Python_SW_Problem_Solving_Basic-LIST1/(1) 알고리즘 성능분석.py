# !!!아래의 내용은 하나도 빠짐없이 모두 숙지해야 하는 내용!!!
# 반복학습 횟수 : 1

'''
알고리즘의 성능분석 필요성 : 연산의 횟수가 크게 달라지기 때문.
방법1) 실제 걸리는 시간을 측정
방법2) 실행되는 명령문의 개수를 계산
'''

#알고리즘1
#n의 크기에 따라 1+(n*2)번의 연산 수행 즉, 2n+1번의 연산수행
def calcSum(n):
    sum = 0                 # 1번
    for i in range(1, n+1): # 1번
        sum = sum + i       # 1번
    return sum

#알고리즘2
#n의 크기가 달라져도 3번의 연산만에 가능
def calcSum2(n):
    return n * (n+1) // 2  # 3번의 연산

'''
시간복잡도 = 빅오(O)표기법
시간복잡도 함수 중에서 가장 큰 영향력을 주는 n에 대한 항만 표시하며 계수는 생략함
ex) O(2n+1) = O(2n) = O(n)
ex) O(2n^2+10n+100) = O(n^2)
ex) O(2) = O(1)
'''