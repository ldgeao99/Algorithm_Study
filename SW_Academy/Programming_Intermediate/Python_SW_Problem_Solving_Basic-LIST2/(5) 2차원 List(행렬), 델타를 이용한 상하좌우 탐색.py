# !!!아래의 내용은 하나도 빠짐없이 모두 숙지해야 하는 내용!!!
# 반복학습 횟수 : 1

'''
<델타를 이용한 2차 List 탐색>
2차원 리스트(행렬)의 한 좌표에서 네 방향의 인접 요소를 탐색할 때 사용하는 방법
델타 값은 한 좌표에서 네 방향의 좌표와 x, y의 차이를 저장한 List로 구현
델타 값을 이용하여 특정 원소의 상하좌우에 위치한 원소에 접근 가능

!!주의!!
가장자리 원소들의 경우 상하좌우 네 방향에 원소가 존재하지 않는 경우가 있으므로 index를 체크하거나 index의 범위를 제한해야 함
'''

arr = [[0, 1, 2, 3],[4, 5, 6, 7],[8, 9, 10, 11]]

# 특정 위치를 기준으로 상하좌우 순서로 데이터에 접근했을 때 열과 행의 변화값
dx = [0, 0, -1, 1] # 열의 변화값
dy = [-1, 1, 0, 0] # 행의 변화값

n = len(arr)
m = len(arr[0])

for x in range(n):
    for y in range(m):
        for i in range(4):
            # 가장자리 원소들의 경우 상하좌우 네 방향에 원소가 존재하지 않는 경우가 있으므로 index를 체크하거나 index의 범위를 제한해야 함
            # 여기선 처리하지 않았지만 실전에선 처리해줄 필요가 있음. 이때문에 지금은 실행이 안됨.
            X = x + dx[i]
            Y = y + dy[i]
            print(arr[X][Y])   # 상하좌우 값 출력